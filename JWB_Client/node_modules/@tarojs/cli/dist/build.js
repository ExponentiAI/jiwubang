"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs-extra");
const chalk_1 = require("chalk");
const _ = require("lodash");
const Util = require("./util");
const config_1 = require("./config");
const constants_1 = require("./util/constants");
function build(appPath, buildConfig) {
    return __awaiter(this, void 0, void 0, function* () {
        const { type, watch, platform, port, release, page, component, uiIndex } = buildConfig;
        const configDir = require(path.join(appPath, constants_1.PROJECT_CONFIG))(_.merge);
        const outputPath = path.join(appPath, configDir.outputRoot || config_1.default.OUTPUT_DIR);
        if (!fs.existsSync(outputPath)) {
            fs.ensureDirSync(outputPath);
        }
        else if (type !== "h5" /* H5 */ && (type !== "quickapp" /* QUICKAPP */ || !watch)) {
            Util.emptyDirectory(outputPath);
        }
        switch (type) {
            case "h5" /* H5 */:
                buildForH5(appPath, { watch, port });
                break;
            case "weapp" /* WEAPP */:
                buildForWeapp(appPath, { watch, page, component });
                break;
            case "swan" /* SWAN */:
                buildForSwan(appPath, { watch, page, component });
                break;
            case "alipay" /* ALIPAY */:
                buildForAlipay(appPath, { watch, page, component });
                break;
            case "tt" /* TT */:
                buildForTt(appPath, { watch, page, component });
                break;
            case "rn" /* RN */:
                buildForRN(appPath, { watch });
                break;
            case "quickapp" /* QUICKAPP */:
                buildForQuickApp(appPath, { watch, port, release });
                break;
            case "qq" /* QQ */:
                buildForQQ(appPath, { watch, page, component });
                break;
            case "jd" /* JD */:
                buildForJD(appPath, { watch });
                break;
            case "ui" /* UI */:
                buildForUILibrary(appPath, { watch, uiIndex });
                break;
            case "plugin" /* PLUGIN */:
                buildForPlugin(appPath, {
                    watch,
                    platform
                });
                break;
            default:
                console.log(chalk_1.default.red('输入类型错误，目前只支持 weapp/swan/alipay/tt/h5/quickapp/rn 七端类型'));
        }
    });
}
exports.default = build;
function buildForWeapp(appPath, buildConfig) {
    require('./mini').build(appPath, Object.assign({
        adapter: "weapp" /* WEAPP */
    }, buildConfig));
}
function buildForSwan(appPath, buildConfig) {
    require('./mini').build(appPath, Object.assign({
        adapter: "swan" /* SWAN */
    }, buildConfig));
}
function buildForAlipay(appPath, buildConfig) {
    require('./mini').build(appPath, Object.assign({
        adapter: "alipay" /* ALIPAY */
    }, buildConfig));
}
function buildForTt(appPath, buildConfig) {
    require('./mini').build(appPath, Object.assign({
        adapter: "tt" /* TT */
    }, buildConfig));
}
function buildForH5(appPath, buildConfig) {
    require('./h5').build(appPath, buildConfig);
}
function buildForRN(appPath, { watch }) {
    require('./rn').build(appPath, { watch });
}
function buildForQuickApp(appPath, { watch, port, release }) {
    require('./mini').build(appPath, {
        watch,
        adapter: "quickapp" /* QUICKAPP */,
        port,
        release
    });
}
function buildForQQ(appPath, buildConfig) {
    require('./mini').build(appPath, Object.assign({
        adapter: "qq" /* QQ */
    }, buildConfig));
}
function buildForJD(appPath, { watch }) {
    require('./mini').build(appPath, {
        watch,
        adapter: "jd" /* JD */
    });
}
function buildForUILibrary(appPath, { watch, uiIndex }) {
    require('./ui/index').build(appPath, { watch, uiIndex });
}
function buildForPlugin(appPath, { watch, platform }) {
    const typeMap = {
        ["weapp" /* WEAPP */]: '微信',
        ["alipay" /* ALIPAY */]: '支付宝'
    };
    if (platform !== "weapp" /* WEAPP */ && platform !== "alipay" /* ALIPAY */) {
        console.log(chalk_1.default.red('目前插件编译仅支持 微信/支付宝 小程序！'));
        return;
    }
    console.log(chalk_1.default.green(`开始编译${typeMap[platform]}小程序插件`));
    require('./plugin').build(appPath, { watch, platform });
}
